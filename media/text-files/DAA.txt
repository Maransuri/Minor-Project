1. binary search
#include <stdio.h>

int main()

{

int c, first, last, middle, n, search, array[100];

printf("Enter number of elements\n");

 scanf("%d",&n);

printf("Enter %d integers\n", n);

for (c = 0; c < n; c++)

scanf("%d",&array[c]);

printf("Enter value to find\n");

scanf("%d", &search);

first = 0; last = n - 1;

middle = (first+last)/2;

while (first <= last) {

if (array[middle] < search)

first = middle + 1;

else if (array[middle] == search)

 {

printf("%d found at location %d.\n", search, middle+1); break;

}

else

last = middle - 1;

middle = (first + last)/2;

}

if (first > last)

printf("Not found! %d isn't present in the list.\n", search);

return 0; 

}

2. quick sort


#include<stdio.h>

 

void quicksort(int number[25],int first,int last){

 

int i, j, pivot, temp;

 

if(first<last){

 

pivot=first;

 

i=first;

 

j=last;

 

while(i<j){

 

while(number[i]<=number[pivot]&&i<last)

 

i++;

 

while(number[j]>number[pivot])

 

j--;

 

if(i<j){

 

temp=number[i];

 

number[i]=number[j];

 

number[j]=temp;

 

} }

 

temp=number[pivot];

 

number[pivot]=number[j];

 

number[j]=temp;

 

quicksort(number,first,j-1);

 

quicksort(number,j+1,last);

 

} }

 

int main(){

 

int i, count, number[25];

 

printf("Enter some elements (Max. - 25): ");

 

scanf("%d",&count);

 

printf("Enter %d elements: ", count);

 

for(i=0;i<count;i++)

 

scanf("%d",&number[i]);

 

quicksort(number,0,count-1);

 

printf("The Sorted Order is: ");

 

for(i=0;i<count;i++)

 

printf(" %d",number[i]);

 

return 0;

 

}

3. strasses's matrix
#include<stdio.h>

 

void quicksort(int number[25],int first,int last){

 

int i, j, pivot, temp;

 

if(first<last){

 

pivot=first;

 

i=first;

 

j=last;

 

while(i<j){

 

while(number[i]<=number[pivot]&&i<last)

 

i++;

 

while(number[j]>number[pivot])

 

j--;

 

if(i<j){

 

temp=number[i];

 

number[i]=number[j];

 

number[j]=temp;

 

} }

 

temp=number[pivot];

 

number[pivot]=number[j];

 

number[j]=temp;

 

quicksort(number,first,j-1);

 

quicksort(number,j+1,last);

 

} }

 

int main(){

 

int i, count, number[25];

 

printf("Enter some elements (Max. - 25): ");

 

scanf("%d",&count);

 

printf("Enter %d elements: ", count);

 

for(i=0;i<count;i++)

 

scanf("%d",&number[i]);

 

quicksort(number,0,count-1);

 

printf("The Sorted Order is: ");

 

for(i=0;i<count;i++)

 

printf(" %d",number[i]);

 

return 0;

 
4. spanning tree
#include <stdio.h>

#include <conio.h>

#include <stdlib.h>

int i, j, k, a, b, u, v, n, ne = 1;

int min, mincost = 0, cost[9][9], parent[9];

int find(int);

int uni(int, int);

void main()

{

  printf("Enter the no. of vertices:\n");

  scanf("%d", &n);

  printf("\nEnter the cost adjacency matrix:\n");

  for (i = 1; i <= n; i++)

  {

     for (j = 1; j <= n; j++)

     {

      scanf("%d", &cost[i][j]);

      if (cost[i][j] == 0)

                     cost[i][j] = 999;

    }

  }

  printf("The edges of Minimum Cost Spanning Tree are\n");

  while (ne < n)

  {

    for (i = 1, min = 999; i <= n; i++)

    {

      for (j = 1; j <= n; j++)

      {

        if (cost[i][j] < min)

        {

          min = cost[i][j];

          a = u = i;

          b = v = j;

        } }

    }

    u = find(u);

    v = find(v);

    if (uni(u, v))

    {

      printf("%d edge (%d,%d) =%d\n", ne++, a, b, min);

      mincost += min;

    }

    cost[a][b] = cost[b][a] = 999;

  }

  printf("\nMinimum cost = %d\n", mincost);

  getch();

}

  int find(int i)

{

  while (parent[i])

    i = parent[i];

  return i;

}

int uni(int i, int j)

{

  if (i != j)

  {

    parent[j] = i;

    return 1;

  }

  return 0;

}
}

5. job sequencing
 #include <stdio.h>

#include <stdlib.h>

#include <stdbool.h>

//Job Structure

typedef struct {

    char id;

    int deadline;

    int profit;)}job;

// function to compare two jobs based on their profit. returns true if job b's profit < job a's profit

 

int compareJob(const Job *a, const Job *b){

    return b->profit - a->profit;

}

//function finds the best job sequence

void bestJob(Job jobs[],int sizeOfJobs){

    //null char array

    char jobsToDo[5]= {'\0'};

 

    for(int i=0, k=0; i<sizeOfJobs; i++){

        k = jobs[i].deadline-1;

        //Searching backwards the empty date nearest to deadline

        while(jobsToDo[k] != '\0' && k >= 0){

            k--;

        }       

        //if empty date found, set the job

        if(k != -1)

            jobsToDo[k]= jobs[i].id;

    }   

    //output the final job sequence

    printf("\nBest order and jobs to do is: ");

    int idx=0;

    while(jobsToDo[idx] != '\0'){

        printf("%c ",jobsToDo[idx]);

        idx++;

    } }

//function to display the jobs table

void display(Job jobs[], int n){

    printf("Job Id:     \t");

    for(int i=0; i<n; i++){

        printf("%c \t",jobs[i].id);

    }

    printf("\n");

 

    printf("Job Deadline: \t");

    for(int i=0; i<n; i++){

        printf("%d \t",jobs[i].deadline);

    }

    printf("\n");

 

    printf("Job Profit: \t");

    for(int i=0; i<n; i++){

         printf("%d \t",jobs[i].profit);

    }

    printf("\n");

}

int main()

{  

    //intialize the jobs

    Job jobs[]=  {{'w', 1, 19}, {'v', 2, 100}, {'x', 2, 27},

                   {'y', 1, 25}, {'z', 3, 15}};                  

    //display the jobs data

    display(jobs,5);

   

    //sorting jobs[] w.r.t their profit

    qsort(jobs,5,sizeof(jobs[0]),compareJob);

   

    bestJob(jobs,5);

    return 0;

}

6. travelling salesman
#include<stdio.h>

int ary[10][10], completed[10], n, cost=0;

void takeInput()

{

int i, j;

printf("Enter the number of villages: ");

scanf("%d",&n);

printf("\nEnter the Cost Matrix\n");

for(i=0;i < n;i++)

{

printf("\nEnter Elements of Row: %d\n",i+1);

for( j=0;j < n;j++)

scanf("%d",&ary[i][j]);

completed[i]=0;

}

printf("\n\nThe cost list is:");

for( i=0;i < n;i++)

{

printf("\n");

for(j=0;j < n;j++)

printf("\t%d",ary[i][j]);

} }

void mincost(int city)

{

int i, ncity;

completed[city]=1;

printf("%d--->",city+1);

ncity=least(city);

if(ncity==999)

{

ncity=0;

printf("%d",ncity+1);

cost+=ary[city][ncity];

return;

}

 mincost(ncity);

}

int least(int c)

{

int i,nc=999;

int min=999,kmin;

for(i=0;i < n;i++)

{

if((ary[c][i]!=0)&&(completed[i]==0))

if(ary[c][i]+ary[i][c] < min)

{

min=ary[i][0]+ary[c][i];

kmin=ary[c][i];

nc=i;

}}

if(min!=999)

cost+=kmin;

return nc;

}

int main()

{

takeInput();

printf("\n\nThe Path is:\n");

mincost(0); //passing 0 because starting vertex

printf("\n\nMinimum cost is %d\n ",cost);

return 0;}

7. matrix chain multiplication
// This code implemented using Algorithm in the Coremen book

#include<stdio.h>

#include<limits.h>

// Matrix Ai has dimension p[i-1] x p[i] for i = 1..n 

int MatrixChainMultiplication(int p[], int n)

{

    int m[n][n];

    int i, j, k, L, q;

 

    for (i=1; i<n; i++)

        m[i][i] = 0;    //number of multiplications are 0(zero) when there is only one matrix

 

    //Here L is chain length. It varies from length 2 to length n.

    for (L=2; L<n; L++)

    {

        for (i=1; i<n-L+1; i++)

        {

            j = i+L-1;

            m[i][j] = INT_MAX;  //assigning to maximum value

 

            for (k=i; k<=j-1; k++)

            {

                q = m[i][k] + m[k+1][j] + p[i-1]*p[k]*p[j];

                if (q < m[i][j])

                {

                    m[i][j] = q;  //if number of multiplications found less that number will be updated.

                }

            }

        }

    }

    return m[1][n-1];   //returning the final answer which is M[1][n]

} 

int main()

{

    int n,i;

    printf("Enter number of matrices\n");

    scanf("%d",&n);

    n++;

    int arr[n];

    printf("Enter dimensions \n");

    for(i=0;i<n;i++)

    {

        printf("Enter d%d :: ",i);

        scanf("%d",&arr[i]);

    }

    int size = sizeof(arr)/sizeof(arr[0]);

 

    printf("Minimum number of multiplications is %d ", MatrixChainMultiplication(arr, size));

 

    return 0;

}

8. graph coloring
#include<stdio.h>

#include<conio.h>

static int m, n;

 

static int c=0;

 

static int count=0;

 

int g[50][50];

 

int x[50];

void nextValue(int k);

 

void GraphColoring(int k);

 

  void main() {

 

int i, j;

int temp;

clrscr();

printf("\nEnter the number of nodes: " );

scanf("%d", &n);

 

/*

 printf("\nIf edge exists then enter 1 else enter 0 \n");

 

 for(i=1; i<=n; i++)

 {

 

  x[i]=0;

 

  for(j=1; j<=n; j++)

 

  {

 

   if(i==j)

 

    g[i][j]=0;

 

   else

   {

 

    printf("%d -> %d: " , i, j);

 

    scanf("%d", &temp);

 

    g[i][j]=g[j][i]=temp;

 

   }  } }*/

   printf("\nEnter Adjacency Matrix:\n");

 

  for(i=1;i<=n;i++)

 {

  for(j=1;j<=n;j++)

 

  {

   scanf("%d", &g[i][j]);

 

  } }

 

 printf("\nPossible Solutions are\n");

 

 for(m=1;m<=n;m++)

 

 {

 

  if(c==1)

 

  {

   break;

  }

  GraphColoring(1);

 }

 printf("\nThe chromatic number is %d", m-1);

 

 //in for loop, m gets incremented first and then the condition is checked

 

 //so it is m minus 1

 

 printf("\nThe total number of solutions is %d", count);

 

 getch();

 

}

void GraphColoring(int k)

{

 int i;

 while(1)

 

 {

 

  nextValue(k);

 

  if(x[k]==0)

 

  {

 

   return;

  }

 

 if(k==n)

 {

 

  c=1;

 

  for(i=1;i<=n;i++)

 

  {

 

   printf("%d ", x[i]);

 

  }

 

  count++;

 

  printf("\n");

 

 }

 else

 

  GraphColoring(k+1);

 }  }

void nextValue(int k)

{

 int j;

 

 while(1)

 

 {

  x[k]=(x[k]+1)%(m+1);

 

  if(x[k]==0)

 

  {

  return;

 

  }

  for(j=1;j<=n;j++)

 

  {

   if(g[k][j]==1&&x[k]==x[j])

 

    break;

  }

  if(j==(n+1))

  {    

return; 

} }}


9. n queens
#include<stdio.h>

#include<math.h>

int board[20],count;

int main()

{

int n,i,j;

void queen(int row,int n);

printf(" - N Queens Problem Using Backtracking -");

printf("\n\nEnter number of Queens:");

scanf("%d",&n);

queen(1,n);

return 0;

}

//function for printing the solution

void print(int n)

{

int i,j;

printf("\n\nSolution %d:\n\n",++count);

for(i=1;i<=n;++i)

  printf("\t%d",i);

for(i=1;i<=n;++i)

{

  printf("\n\n%d",i);

  for(j=1;j<=n;++j) //for nxn board

  {

   if(board[i]==j)

    printf("\tQ"); //queen at i,j position

   else

    printf("\t-"); //empty slot

  }

}}

/*funtion to check conflicts

If no conflict for desired postion returns 1 otherwise returns 0*/

int place(int row,int column)

{

int i;

for(i=1;i<=row-1;++i)

{

  //checking column and digonal conflicts

  if(board[i]==column)

   return 0;

  else

   if(abs(board[i]-column)==abs(i-row))

    return 0;

}

return 1; //no conflicts

}

//function to check for proper positioning of queen

void queen(int row,int n)

{

int column;

for(column=1;column<=n;++column)

{

  if(place(row,column))

  {

   board[row]=column; //no conflicts so place queen

   if(row==n) //dead end

    printNo; //printing the board configuration

   else //try queen with next position

    queen(row+1,n);

  }}}


10. 0/1 knapsack
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

typedef enum { NO, YES } BOOL;

int N;

int vals[100];

int wts[100];

int cap = 0;

int mval = 0;

void getWeightAndValue (BOOL incl[N], int *weight, int *value) {

int i, w = 0, v = 0;

for (i = 0; i < N; ++i) {

if (incl[i]) {

w += wts[i];

v += vals[i];

}

}

*weight = w;

*value = v;

}

void printSubset (BOOL incl[N]) {

int i;

int val = 0;

printf("Included = { ");

for (i = 0; i < N; ++i) {

if (incl[i]) {

printf("%d ", wts[i]);

val += vals[i];

}

}

printf("}; Total value = %d\n", val);

}

void findKnapsack (BOOL incl[N], int i) {

int cwt, cval;

getWeightAndValue(incl, &cwt, &cval);

if (cwt <= cap) {

if (cval > mval) {

printSubset(incl);

mval = cval;

}

}

if (i == N || cwt >= cap) {

return;

}

int x = wts[i];

BOOL use[N], nouse[N];

memcpy(use, incl, sizeof(use));

memcpy(nouse, incl, sizeof(nouse));

use[i] = YES;

nouse[i] = NO;

findKnapsack(use, i+1);

findKnapsack(nouse, i+1);

}

int main(int argc, char const * argv[]) {

printf("Enter the number of elements: ");

scanf(" %d", &N);

BOOL incl[N];

int i;

for (i = 0; i < N; ++i) {

printf("Enter weight and value for element %d: ", i+1);

scanf(" %d %d", &wts[i], &vals[i]);

incl[i] = NO;

}

printf("Enter knapsack capacity: ");

scanf(" %d", &cap);

findKnapsack(incl, 0);

return 0;

}

 